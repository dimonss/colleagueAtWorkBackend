import { DatabaseConfig } from '../src/config/database';

interface MockColleague {
  name: string;
  position: string;
  department: string;
  email: string;
  phone: string;
  hire_date: string;
  salary: number;
  notes: string;
}

const mockColleagues: MockColleague[] = [
  {
    name: "–ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤",
    position: "Senior Software Engineer",
    department: "Engineering",
    email: "ivan.petrov@company.com",
    phone: "+7 (900) 123-45-67",
    hire_date: "2022-03-15",
    salary: 120000,
    notes: "–û—Ç–ª–∏—á–Ω—ã–π —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫, —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ø–æ React –∏ Node.js"
  },
  {
    name: "–ê–Ω–Ω–∞ –°–∏–¥–æ—Ä–æ–≤–∞",
    position: "UI/UX Designer",
    department: "Design",
    email: "anna.sidorova@company.com",
    phone: "+7 (900) 234-56-78",
    hire_date: "2023-01-10",
    salary: 95000,
    notes: "–ö—Ä–µ–∞—Ç–∏–≤–Ω—ã–π –¥–∏–∑–∞–π–Ω–µ—Ä, —Å–æ–∑–¥–∞–µ—Ç –ø–æ—Ç—Ä—è—Å–∞—é—â–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã"
  },
  {
    name: "–ú–∏—Ö–∞–∏–ª –ö–æ–∑–ª–æ–≤",
    position: "Product Manager",
    department: "Product",
    email: "mikhail.kozlov@company.com",
    phone: "+7 (900) 345-67-89",
    hire_date: "2021-11-20",
    salary: 140000,
    notes: "–û–ø—ã—Ç–Ω—ã–π –ø—Ä–æ–¥–∞–∫—Ç-–º–µ–Ω–µ–¥–∂–µ—Ä, –æ—Ç–ª–∏—á–Ω–æ –ø–æ–Ω–∏–º–∞–µ—Ç –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
  },
  {
    name: "–ï–ª–µ–Ω–∞ –í–æ–ª–∫–æ–≤–∞",
    position: "QA Engineer",
    department: "Quality Assurance",
    email: "elena.volkova@company.com",
    phone: "+7 (900) 456-78-90",
    hire_date: "2023-06-05",
    salary: 85000,
    notes: "–í–Ω–∏–º–∞—Ç–µ–ª—å–Ω—ã–π —Ç–µ—Å—Ç–∏—Ä–æ–≤—â–∏–∫, –Ω–∞—Ö–æ–¥–∏—Ç –≤—Å–µ –±–∞–≥–∏"
  },
  {
    name: "–î–º–∏—Ç—Ä–∏–π –ù–æ–≤–∏–∫–æ–≤",
    position: "DevOps Engineer",
    department: "Infrastructure",
    email: "dmitry.novikov@company.com",
    phone: "+7 (900) 567-89-01",
    hire_date: "2022-08-12",
    salary: 110000,
    notes: "–û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç —Å—Ç–∞–±–∏–ª—å–Ω—É—é —Ä–∞–±–æ—Ç—É –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤"
  },
  {
    name: "–û–ª—å–≥–∞ –ú–æ—Ä–æ–∑–æ–≤–∞",
    position: "Frontend Developer",
    department: "Engineering",
    email: "olga.morozova@company.com",
    phone: "+7 (900) 678-90-12",
    hire_date: "2023-04-18",
    salary: 90000,
    notes: "–ú–æ–ª–æ–¥–æ–π —Ç–∞–ª–∞–Ω—Ç–ª–∏–≤—ã–π —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫, –±—ã—Å—Ç—Ä–æ —É—á–∏—Ç—Å—è"
  },
  {
    name: "–°–µ—Ä–≥–µ–π –õ–µ–±–µ–¥–µ–≤",
    position: "Backend Developer",
    department: "Engineering",
    email: "sergey.lebedev@company.com",
    phone: "+7 (900) 789-01-23",
    hire_date: "2021-09-30",
    salary: 100000,
    notes: "–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ø–æ –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–∞–º –∏ –±–∞–∑–∞–º –¥–∞–Ω–Ω—ã—Ö"
  },
  {
    name: "–ú–∞—Ä–∏—è –°–æ–∫–æ–ª–æ–≤–∞",
    position: "Marketing Manager",
    department: "Marketing",
    email: "maria.sokolova@company.com",
    phone: "+7 (900) 890-12-34",
    hire_date: "2023-02-14",
    salary: 80000,
    notes: "–ü—Ä–æ–¥–≤–∏–≥–∞–µ—Ç –Ω–∞—à –ø—Ä–æ–¥—É–∫—Ç –≤ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç—è—Ö"
  },
  {
    name: "–ê–ª–µ–∫—Å–µ–π –ü–æ–ø–æ–≤",
    position: "Data Analyst",
    department: "Analytics",
    email: "alexey.popov@company.com",
    phone: "+7 (900) 901-23-45",
    hire_date: "2022-12-03",
    salary: 95000,
    notes: "–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏ –ø–æ–º–æ–≥–∞–µ—Ç –ø—Ä–∏–Ω–∏–º–∞—Ç—å —Ä–µ—à–µ–Ω–∏—è"
  },
  {
    name: "–¢–∞—Ç—å—è–Ω–∞ –í–æ—Ä–æ–±—å–µ–≤–∞",
    position: "HR Manager",
    department: "Human Resources",
    email: "tatiana.vorobyeva@company.com",
    phone: "+7 (900) 012-34-56",
    hire_date: "2021-07-22",
    salary: 75000,
    notes: "–ó–∞–±–æ—Ç–∏—Ç—Å—è –æ –∫–æ–º–∞–Ω–¥–µ –∏ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–æ–π –∫—É–ª—å—Ç—É—Ä–µ"
  }
];

async function seedDatabase(): Promise<void> {
  console.log('üå± –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –º–æ–∫ –¥–∞–Ω–Ω—ã–º–∏...');
  
  const db = DatabaseConfig.getInstance().getDatabase();
  
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ç–∞–±–ª–∏—Ü–µ
    const existingCount = await new Promise<number>((resolve, reject) => {
      db.get("SELECT COUNT(*) as count FROM colleagues", (err, row: any) => {
        if (err) reject(err);
        else resolve(row.count);
      });
    });

    if (existingCount > 0) {
      console.log(`‚ö†Ô∏è  –í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É–∂–µ –µ—Å—Ç—å ${existingCount} –∑–∞–ø–∏—Å–µ–π.`);
      const answer = process.argv.includes('--force') ? 'y' : 'n';
      if (answer.toLowerCase() !== 'y') {
        console.log('‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ --force –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è.');
        return;
      }
      console.log('üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö...');
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –º–æ–∫ –¥–∞–Ω–Ω—ã–µ
    let addedCount = 0;
    
    for (const colleague of mockColleagues) {
      await new Promise<void>((resolve, reject) => {
        db.run(`
          INSERT INTO colleagues (name, position, department, email, phone, hire_date, salary, notes)
          VALUES (?, ?, ?, ?, ?, ?, ?, ?)
        `, [
          colleague.name,
          colleague.position,
          colleague.department,
          colleague.email,
          colleague.phone,
          colleague.hire_date,
          colleague.salary,
          colleague.notes
        ], function(err) {
          if (err) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ ${colleague.name}:`, err.message);
            reject(err);
          } else {
            addedCount++;
            console.log(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω: ${colleague.name} - ${colleague.position}`);
            resolve();
          }
        });
      });
    }

    console.log(`\nüéâ –£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ ${addedCount} —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤!`);
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    const totalCount = await new Promise<number>((resolve, reject) => {
      db.get("SELECT COUNT(*) as count FROM colleagues", (err, row: any) => {
        if (err) reject(err);
        else resolve(row.count);
      });
    });

    console.log(`üìä –í—Å–µ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –≤ –±–∞–∑–µ: ${totalCount}`);
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –æ—Ç–¥–µ–ª–∞–º
    const deptStats = await new Promise<any[]>((resolve, reject) => {
      db.all(`
        SELECT department, COUNT(*) as count 
        FROM colleagues 
        GROUP BY department 
        ORDER BY count DESC
      `, (err, rows) => {
        if (err) reject(err);
        else resolve(rows);
      });
    });

    console.log('\nüìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –æ—Ç–¥–µ–ª–∞–º:');
    deptStats.forEach(dept => {
      console.log(`   ${dept.department}: ${dept.count} —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤`);
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', error);
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  seedDatabase()
    .then(() => {
      console.log('\n‚ú® –°–∫—Ä–∏–ø—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!');
      process.exit(0);
    })
    .catch((error) => {
      console.error('\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
      process.exit(1);
    });
}

export { seedDatabase, mockColleagues }; 