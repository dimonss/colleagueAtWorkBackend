import { DatabaseConfig } from '../src/config/database';

async function clearDatabase(): Promise<void> {
  console.log('üóëÔ∏è  –ù–∞—á–∏–Ω–∞–µ–º –æ—á–∏—Å—Ç–∫—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');
  
  const db = DatabaseConfig.getInstance().getDatabase();
  
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
    const count = await new Promise<number>((resolve, reject) => {
      db.get("SELECT COUNT(*) as count FROM colleagues", (err, row: any) => {
        if (err) reject(err);
        else resolve(row.count);
      });
    });

    if (count === 0) {
      console.log('‚ÑπÔ∏è  –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É–∂–µ –ø—É—Å—Ç–∞.');
      return;
    }

    console.log(`‚ö†Ô∏è  –ù–∞–π–¥–µ–Ω–æ ${count} –∑–∞–ø–∏—Å–µ–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.`);
    
    // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    const answer = process.argv.includes('--force') ? 'y' : 'n';
    if (answer.toLowerCase() !== 'y') {
      console.log('‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ --force –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏.');
      return;
    }

    // –£–¥–∞–ª—è–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏
    await new Promise<void>((resolve, reject) => {
      db.run("DELETE FROM colleagues", function(err) {
        if (err) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', err.message);
          reject(err);
        } else {
          console.log(`‚úÖ –£–¥–∞–ª–µ–Ω–æ ${this.changes} –∑–∞–ø–∏—Å–µ–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.`);
          resolve();
        }
      });
    });

    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∞–≤—Ç–æ–∏–Ω–∫—Ä–µ–º–µ–Ω—Ç
    await new Promise<void>((resolve, reject) => {
      db.run("DELETE FROM sqlite_sequence WHERE name='colleagues'", function(err) {
        if (err) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –∞–≤—Ç–æ–∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞:', err.message);
          reject(err);
        } else {
          console.log('‚úÖ –ê–≤—Ç–æ–∏–Ω–∫—Ä–µ–º–µ–Ω—Ç —Å–±—Ä–æ—à–µ–Ω.');
          resolve();
        }
      });
    });

    console.log('üéâ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω–∞!');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', error);
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  clearDatabase()
    .then(() => {
      console.log('\n‚ú® –°–∫—Ä–∏–ø—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!');
      process.exit(0);
    })
    .catch((error) => {
      console.error('\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
      process.exit(1);
    });
}

export { clearDatabase }; 